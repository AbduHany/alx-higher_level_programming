==============================
 How to Use 101-lazy_matrix_mul.py
==============================

This module defines a function ``lazy_matrix_mul(m_a, m_b)`` that multiplies
2 matrices ``m_a`` & ``m_b`` and returns its product matrix.

Numbers
=======

``lazy_matrix_mul(m_a, m_b)`` returns the product matrix after multiplying
matrix ``m_a`` and ``m_b``.

::

	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2], [3, 4]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 7 10]
	 [15 22]]

The function also works with matrices that have lists with float values

::

	>>> m_a = [[1.2, 2.4]]
	>>> m_b = [[3.6, 4.3], [5.8, 6.4]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[18.24 20.52]]

The function could work with lists that have ints and floats together

::

	>>> m_a = [[1.4, 2, 3.2], [4, 5.5, 6]]
	>>> m_b = [[5, 4.8], [8, 6], [9, 3.5]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	[[ 51.8   29.92]
     	 [118.    73.2 ]]

if ``m_a`` or ``m_b`` aren't lists, the function raises a TypeError

::

	>>> m_a = "Hello"
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

::

	>>> m_a = [[3, 4], [5, 6]]
	>>> m_b = "Hello"
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

if ``m_a`` or ``m_b`` aren't list of lists, the function raises a TypeError

::

	>>> m_a = [[3, 4], [5, 6]]
	>>> m_b = [1, 2, 3]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)

::

	>>> m_a = [1, 2, 3]
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (3,) and (2,2) not aligned: 3 (dim 0) != 2 (dim 0)

if ``m_a`` or ``m_b`` are empty or contain a single empty list, the function
raises a TypeError

::

	>>> m_a = []
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

::

	>>> m_a = [[3, 4], [5, 6]]
	>>> m_b = [[]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

if ``m_a`` or ``m_b`` contain lists that contains elements of any type
other than int or float, the function raises a TypeError.

::

	>>> m_a = [["Hey", 2], ["there", 4]]
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

::

	>>> m_a = [[1, 2], [[1, 2, 3], 4]]
	>>> m_b = [[[4, 5], 4], [5, 6]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

::

	>>> m_a = [[1, 2], [3, 4], [5, 6]]
	>>> m_b = [["hi", "there"], ["yo", "yo"]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

::

	>>> m_a = [[1, 2], [3, 4], [5, 6]]
	>>> m_b = [[{'hi': 3}, 5], [4, 3]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported

if ``m_a`` or ``m_b`` aren't rectangles (meaning all rows are equal in length),
the function raises a TypeError

::

	>>> m_a = [[1, 2], [3, 4, 5]]
	>>> m_b = [[1, 2, 5], [3, 4]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

::

	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2, 5], [3, 4]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

if the columns of ``m_a`` isn't equal to the rows of ``m_b``
it means that they can't be multiplied.

::

	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2, 5], [3, 4, 2], [2, 4, 5]]
	>>> print(lazy_matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,3) not aligned: 2 (dim 1) != 3 (dim 0)

Note that errors are checked for ``m_a`` first then for ``m_b``
so if both matrices are invalid the exception raised will always
be for ``m_a``

::

	>>> print(lazy_matrix_mul([], []))
	0.0

When the function is given the matrix value None, it raises an
error.

::

	>>> print(lazy_matrix_mul(None, [[1, 2, 3], [4, 5, 6]]))
	Traceback (most recent call last):
	TypeError: Object arrays are not currently supported

when given only one or 0 arguments, the function raises an error.

::

	>>> print(lazy_matrix_mul([[1, 2, 3], [4, 5, 6]]))
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

::

	>>> print(lazy_matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
