==============================
 How to Use 4-print_square.py
==============================

This module defines a function ``print_square(size)`` that prints a square
with the character ``#``.

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(4)
	####
	####
	####
	####

::

	>>> print_square(2)
	##
	##

if size is 0 then the function succeeds and prints nothing.

::

	>>> print_square(0)

if size is not of type int, a TypeError is raised.

::

	>>> print_square("Abdu")
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(5.4)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square([1, 2, 3])
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square((1, 2, 3))
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square({1: 1, 2: 2})
	Traceback (most recent call last):
	TypeError: size must be an integer

if size is a negative value, a ValueError is raised.

::

	>>> print_square(-10)
	Traceback (most recent call last):
	ValueError: size must be >= 0

if size is a float and negative, the TypeError is raised rather than
the ValueError.

::

	>>> print_square(-4.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

if no arguments are provided, the function fails and raises an error.

::

	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'
