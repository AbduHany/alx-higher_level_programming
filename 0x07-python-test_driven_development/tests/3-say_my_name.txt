=============================
 How to Use 3-say_my_name.py
=============================

This module defines a function ``say_my_name(first_name, last_name="")``
that prints ``My name is <first name> <last name>`` for the given values.

::

	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("Abdu", "Hany")
	My name is Abdu Hany

Note that if only one argument is given, the function succeeds and uses a
default empty string as its second argument.

::

	>>> say_my_name("Abdu") #doctest: +NORMALIZE_WHITESPACE
	My name is Abdu

if first_name has any type other than str, the function fails and
raises an exception.

::

	>>> say_my_name(5, "Hany")
	Traceback (most recent call last):
	TypeError: first_name must be a string

The same error is raised if first_name is None

::

	>>> say_my_name(None, "Hany")
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name(["Abdu", "Hany"], "Metawei")
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name("Abdu", ["Hany", "Metawei"])
	Traceback (most recent call last):
	TypeError: last_name must be a string

the function also fails if a tuple or dictionary is given to it

::

	>>> say_my_name({1: "Abdu", 2: "Hany"}, "Metawei")
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name(("Abdu", "Hany"), "Metawei")
	Traceback (most recent call last):
	TypeError: first_name must be a string

if both arguments are invalid, the error is raised for the first argument.

::

	>>> say_my_name(5, 6)
	Traceback (most recent call last):
	TypeError: first_name must be a string

if None or no arguments are given, the function fails.

::

	>>> say_my_name(None)
	Traceback (most recent call last):
	TypeError: first_name must be a string

::

	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
