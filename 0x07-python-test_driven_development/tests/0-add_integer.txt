=============================
 How to Use 0-add_integer.py
=============================

This module defines a function ``add_integer(a, b=98)`` that adds 2 integers.

Numbers
=======

``add_integer(...)`` returns the sum of its arguments a and b. For numbers,
that value is equivalent to using the ``+`` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(5, 3)
	8

::

	>>> add_integer(5, -3)
	2

The function accepts float values

::

	>>> add_integer(5.0, 2.0)
	7

The function casts the float values to ints before adding them

::

	>>> add_integer(3.8, 5.9)
	8

The function also accepts negative int and float values

::

	>>> add_integer(-2.1, -4.2)
	-6

	>>> add_integer(-3, -6)
	-9

If given only one argument, the function adds it to the number 98 by default

::

	>>> add_integer(2)
	100

if given a complex number

::

	>>> add_integer(2+5j, 4)
	Traceback (most recent call last):
	TypeError: a must be an integer


Non-Numbers
===========

``add_integer(...)`` checks that its arguments are of int or float types and
if not it raises an error accordingly.

::

	>>> add_integer("hi", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(3, "hi")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(6, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both arguments aren't int or float types, it raises the exception for
the first argument.

::
	>>> add_integer("hi", None)
	Traceback (most recent call last):
	TypeError: a must be an integer

When given the value of Nan, the function raises an error

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(7, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

when given the value of inf, it also fails

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(7, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

if given more than 2 arguments the function fails

::

	>>> add_integer(7, 5, 9)
	Traceback (most recent call last):
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
